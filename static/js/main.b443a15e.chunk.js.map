{"version":3,"sources":["reducers/index.js","components/Header.js","components/Item.js","components/ItemList.js","actions/index.js","components/Category.js","components/SelectedItem.js","components/SelectedItemList.js","App.js","serviceWorker.js","index.js"],"names":["createStore","state","action","length","type","existingItem","filter","item","id","title","image","Header","href","Item","tooltip","Tooltip","this","props","className","data-id","onClick","onAddItem","OverlayTrigger","placement","overlay","src","alt","React","Component","connect","dispatch","addItem","items","map","key","Category","name","SelectedItem","onDeleteItem","icon","faTimes","size","deleteItem","App","categories","formatCatgories","bind","data","category","value","index","self","indexOf","forEach","categoryName","push","axios","get","then","res","setState","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b443a15e.chunk.js","sourcesContent":["import { createStore } from 'redux'\r\n\r\nconst items = (state = [], action) => {\r\n    if (state.length && action.type === 'ADD_ITEM') {\r\n        const existingItem = state.filter((item) => item.id === action.id)[0];\r\n        if (existingItem) {\r\n            return state;\r\n        }\r\n    }\r\n\r\n    switch (action.type) {\r\n        case 'ADD_ITEM':\r\n            return [...state, {\r\n                id: action.id,\r\n                title: action.title,\r\n                image: action.image\r\n            }];\r\n        case 'DELETE_ITEM':\r\n            return state.filter(({id}) => id !== action.id);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default createStore(items);","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <div>\r\n                <nav>\r\n                    <div>\r\n                        <a href=\"/\">\r\n                            wondrous tails\r\n                        </a>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nclass Item extends React.Component {\r\n    render() {\r\n        const tooltip = (\r\n            <Tooltip>{this.props.title}</Tooltip>\r\n        );\r\n\r\n        return (\r\n            <div className=\"item\" data-id={this.props.id} onClick={() => this.props.onAddItem()}>\r\n                <OverlayTrigger placement=\"top\" overlay={tooltip}>\r\n                    <img src={'./images/' + this.props.image} alt={this.props.title} />\r\n                </OverlayTrigger>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from '../actions';\r\nimport Item from './Item';\r\n\r\nconst ItemList = ({ items, onAddItem }) => {\r\n    return  (\r\n        <div className=\"category-items\">\r\n            {items.map(item => \r\n                <Item\r\n                    key={item.id}\r\n                    {...item}\r\n                    onAddItem={() => onAddItem(item)}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAddItem: (item) => dispatch(addItem(item))\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ItemList);","export const addItem = (item) => {\r\n    return {\r\n        type: 'ADD_ITEM',\r\n        id: item.id,\r\n        title: item.title,\r\n        image: item.image\r\n    };\r\n};\r\n\r\nexport const deleteItem = (id) => {\r\n    return {\r\n        type: 'DELETE_ITEM',\r\n        id\r\n    }\r\n}","import React from 'react';\r\nimport ItemList from './ItemList'\r\n\r\nclass Category extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"category\">\r\n                <div className=\"big-title\">{this.props.name}</div>\r\n                <ItemList items={this.props.items} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Category;","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass SelectedItem extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"selected-item\">\r\n            <div className=\"item-image\">\r\n                    <img src={'./images/' + this.props.item.image} alt={this.props.item.title} />\r\n                </div>\r\n                <div className=\"item-title\">{this.props.item.title}</div>\r\n                <div className=\"item-actions\">\r\n                    <button className=\"action-btn btn-delete\" onClick={() => this.props.onDeleteItem()}>\r\n                        <FontAwesomeIcon icon={faTimes} size=\"xs\" />\r\n                    </button>                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedItem;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteItem } from '../actions/';\r\nimport SelectedItem from './SelectedItem';\r\n\r\nconst SelectedItemList = ({items, onDeleteItem}) => {\r\n    return  (\r\n        <div className=\"tails-selected\">\r\n            <div className=\"big-title\">Selected</div>\r\n        {items.length ? items.map(item => \r\n            <SelectedItem\r\n                key={item.id}\r\n                item={item}\r\n                onDeleteItem={() => onDeleteItem(item.id)}\r\n            />    \r\n        ) : <div>No items selected</div>}\r\n        </div>\r\n    )  \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        items: state\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onDeleteItem: (id) => dispatch(deleteItem(id))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedItemList);","import React from 'react';\nimport axios from 'axios';\nimport Category from './components/Category';\nimport SelectedItemList from './components/SelectedItemList';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      categories: []\n    };\n    this.formatCatgories = this.formatCatgories.bind(this);\n  }\n\n  formatCatgories(data) {\n    let categories = []\n    const categoryNames = data.map(item => item.category).filter((value, index, self) => self.indexOf(value) === index);\n    categoryNames.forEach(categoryName => {\n      const category = {\n        'name': categoryName,\n        'items': data.filter(item => item.category === categoryName)\n      };\n      categories.push(category);\n    });\n    return categories;\n  }\n\n  componentDidMount() {\n    axios.get('./data.json')\n      .then((res) => {\n        const categories = this.formatCatgories(res.data);\n        this.setState({\n          items: res.data,\n          categories: categories\n        })\n      });\n  }\n\n  render() {\n    return (\n      <main>\n        <div className=\"tails\">\n          <div className=\"tails-options\">\n            <main>\n              {this.state.categories.map((category, key) =>\n                <Category {...category} key={key}/>\n              )}            \n            </main>      \n          </div>\n          <div className=\"tails-selections\">\n            <aside>\n              <SelectedItemList />\n            </aside>  \n          </div>          \n        </div> \n      </main>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './reducers'\n\nimport './index.css';\nimport Header from './components/Header';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Header />\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}